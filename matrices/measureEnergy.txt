## Lab04 – Default Power Profile (assumed Balanced)
Machine: rasalas  
CPU: Intel(R) Core(TM) i9-14900  
Power Profile: Not detected (assumed Balanced)  
Compiler: gcc  
Flags: -O0  
Executable: matrix_base_gcc-O0.exe  
Matrix Size: 3072 x 3072  
Frobenius Norm: 2.58459e+07

Fastest run (out of 3):
Time: 218.50 seconds  
Energy: 1840.31 J (1840305775 µJ)

Methodology:
Used the readEnergy.sh wrapper script to capture energy usage via RAPL counters. Repeated the test 3 times and recorded the fastest result. Power governor could not be detected, assumed Balanced setting is used by default.

Next step: compare with other machines and/or power profiles if available.





## Fortran (gfortran -O0, N=3072)

Compiled using: gfortran -O0  
Executable: matrices_gfortran-O0.exe  
Machine: rasalas  
Frobenius Norm: 2.5845874e+07

Three runs performed. Fastest result recorded below:

- Time (real): 278.28 seconds  
- Energy used: 2,326,733,606 µJ = 2,326.73 J

Compared to the C version (gcc -O0), the Fortran implementation was slower and consumed more energy.  
This may be due to differences in how memory and loops are handled between the languages.













## Fortran (ifx -O0, N=3072)

Compiled using: ifx -O0  
Executable: matrices_ifx-O0.exe  
Machine: rasalas  
Frobenius Norm: 2.5845874e+07

Three runs performed. Fastest result recorded below:

- Time (real): 6:10.72 (370.72 seconds)  
- Energy used: 3,108,943,763 µJ = 3108.94 J

Compared to GNU Fortran (`gfortran -O0`), the Intel compiler was significantly slower (370.72 s vs 278.28 s) and consumed more energy (3108.94 J vs 2326.73 J). On this hardware, **gfortran** is therefore the better choice for energy efficiency at zero optimisation.


## Python (pure, matrices.py)

Machine: rasalas  
Interpreter: python (CPython)  
Script: matrices.py  

### N = 512  
- Time (real): 25.79 s  
- Energy: 239,833,004 µJ = 239.83 J  
- Frobenius Norm: 7.23616e+05  

### N = 1024  
- Time (real): 3:59.91 (239.91 s)  
- Energy: 2,184,707,969 µJ = 2184.71 J  
- Frobenius Norm: 2.89068e+06  

The pure-Python implementation is significantly slower and uses far more energy compared to the compiled C and Fortran versions.




## Python (NumPy, matrices-numpy.py)

Machine: rasalas  
Interpreter: python + NumPy  
Script: matrices-numpy.py  

### N = 512  
- Time (real): 0.49 s  
- Energy: 4,518,849 µJ = 4.52 J  
- Frobenius Norm: 7.23616e+05  

### N = 1024  
- Time (real): 1.79 s  
- Energy: 16,422,138 µJ = 16.42 J  
- Frobenius Norm: 2.89068e+06  

NumPy’s vectorised routines drastically reduced runtime and energy consumption compared to both the pure-Python version and even the compiled implementations. For example, at N=1024, NumPy completed in under 2 seconds versus over 4 minutes in pure Python.



